I started with Leet code problem in Arrays, then moved to interview question and answer for Strings:

Started Interview Set -75:
****************************
https://leetcode.com/study-plan/algorithm/?progress=gf9p9is

Started with Binary Search Series:
*************************
https://leetcode.com/explore/learn/card/binary-search/


https://www.journaldev.com/1321/java-string-interview-questions-and-answers:

Data types conversion: string to char, String to int, String to bytes and visa versa
Concept of String pool

https://www.baeldung.com/java-string-pool:
************************************
created unit test for this

Different features of String:
****************************
https://www.journaldev.com/16928/java-string

How can you view the pool size:
*************************
two options for viewing the pool size:
-XX:+PrintFlagsFinal
-XX:+PrintStringTableStatistics

If we want to increase the pool size in terms of buckets, we can use the StringTableSize JVM option
-XX:StringTableSize=4901

Current pool size:
*****************
Prior to Java 7, the default pool size was 1009 buckets but this value was subject to a few changes in more recent Java versions. 
To be precise, the default pool size from Java 7u40 until Java 11 was 60013 and now it increased to 65536.

Note that increasing the pool size will consume more memory but has the advantage of reducing the time required
to insert the Strings into the table.

Java -9 Compact Strings:
**********************
Until Java 8, Strings were internally represented as an array of characters â€“ char[], encoded in UTF-16, 
so that every character uses two bytes of memory.

With Java 9 a new concept is provided, called Compact Strings. 
This new format will switch encoding between char[] and byte[] depending on the stored content.

Since the new String representation will use the UTF-16 encoding only when necessary, 
the amount of heap memory will be significantly lower, which in turn causes less Garbage Collector overhead on the JVM.
